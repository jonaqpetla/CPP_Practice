The guidance from our sole lord and savior, Cherno. Also some additional snippets.


>>  <iostream> cuz the file is in $PATH. "lol.cpp" cuz relative to current directory.

>>  #ifndef _LOL
	#define _LOL
	//write stuff to be defined only once, that's, if not defined already.
	#endif

>>  13 is a decimal int. 0b1101 is a binary. 015 is octal. 0x0D is hex.
	std::cout << std::hex << (int)n; or std::cout << std::oct << n; //nothing for binary :(
>>  replace
	#define replace 0
	replacethis replace(fun) fun(replace) // will output:
	replace	//not defined yet, so left alone

	replacethis 0(fun) fun(0) //doesn't replace substrings
	use g++ -E filename or gcc -E filename or cl /E to see the output to stdout after the preporcessor step
	g++ -E filename > filename.afterpreprocessing or cl /P filename so preprocess to file

>>  compiler makes translation files, linker links them. #include will copy paste all the code into one file,
	that's not necessary if we have a linker.

>>  Debug magic: right click to view disassembly. debug>window>memory to view stack in VS

>>  Operator precedence: https://docs.microsoft.com/en-us/cpp/cpp/cpp-built-in-operators-precedence-and-associativity?view=vs-2017
	:: (scope resolution)
	. -> [] () postfix++ -- type() const_cast dynamic_cast reinterpret_cast static_cast
	++prefix -- sizeof() ~one's complement ! unary- + & * new delete (type cast)
	.* ->* (pointer to member)
	* / %	(multiply, divide, modulus)
	+ -		(plus, minus)
	<< >>
	< <= > >= 
	== !=
	&	(bitwise and)
	^	(bitwise xor)
	|	(bitwise or)
	&&	(logical)
	|| 
	? : (conditional. evaluates left to right, short circuiting)
	= *= /= %= += -= <<= >>= &= |= ^=
	throw
	, ( e.g. var = (count = 19, incr = 10, count+1) means var = 20. evaluates left to right, rightmost is the output )

>>  reference (brother of pointer, just cleaner): int& value is a variable of type reference. 
	int a = 5; 
	int& value = a; 
	now value means a, it's another name.
	Pass by reference: f(a); void f(int& b) { retutn b; }
	I like working with pointers (equivalent), but pointers can become clumsy after a while. 
	int& val; // is invalid. 
	int& val = a; 
	val = b; //will act as a = b and reference won't change.
	C doesn't have references.
	Array of references is invalid
	You cannot reference a reference
	You cannot point to reference

>>  static and extern (outside class): 
	limit the scope of the variable to inside/outside the translation unit. 
	Linker will not look at other files for the static variable or function.
	extern can be used to declare global variables inside a function

>>  static in class means only one instance of that variable or function shared across all instances of the class. 
	className::variable = 5; 
	className::function(); 
	NOT instance.variable = 5; 
	A static method doesn't have an associated class instance, so it can't access members of an instance by 
	default. We can pass an instance as a parameter tho.

>>  local static to limit the scope (maybe to an if block), but keep it. 
	function(){
		static remember; 
	} //remember will hold its value across function calls.

>>  static variable in a function means only one instance across all calls to the function

>>  enum example {
	A = 5, B, C
	}; 
	//or enum example:char to reduce memory requirements
	int main() {
	example value = B;
	value == 6; //is true
	enums are just integers behind the scenes.
	A, B, C=100, D will get us A == 0, B == 1, C == 100, D == 101

>>  C++ default constructor does nothing. Java or C# actually initialises ints and floats to 0. 
	public: className() = delete; //gets rid of the default constructor

>>  0.0f means float 0. e.g. float i = 13.45f; 0.0 will default to double. (double and ints are defaults)

>>  destructor. ~className(). Stack allocated vs heap allocated memory. Can avoid usually.

>>  Inheritance to remove code duplication. class human : public livingThing {};

>>  virtual functions to be overridden by an inherited class. Minor additional performance overhead.
	Every inherited class is also the base class behind the scene, and functions get confused somethimes.
	Marking the function in the base class as virtual, generates a v-table and in case the function is overridden,
	makes sure to use the overridden function. You can also optionally mark the overridden fxn as override.
	pure virtual function: doesn't have a body in the base class. Forces the derived classes to implement it.
	It's called an interface.
	virtual std::string functionName() = 0; //class cannot be instantiated unless we have implemented it

>>  visibily modifier: private, protected, public. protected means subclasses can access that shit

>>  int example[5]; //creates stuff in the stack and will be destroyed with the function. 
	int* example = new int[5];  //will create stuff in heap and we'll have to delete it later as 
	delete[] example; //This is called allocating dynamically. We do this to play with the lifetimes. 
	e.g. function returning a new array. An object containing an array as in int example[5] will have 
	the ints in the starting address of the object, but just a pointer of it was declared as 
	int* something = new int[5]. Pointer to a pointer in that case. Stack allocated pointers can have 
	sizeof(example) return number of bytes  in the array. sizeof(something) will return bytes in an int pointer.
	Array size has to be known at compile time. These are raw arrays.

>>  C++ 11 has dynamic arrays. 
	std::array<int, 5> arrayName; 
	arrayName.size() will return 5. A bit of overhead, but usually worth the safety.

>>  c style strings: const char* name = "init"; 
	but that's a fixed size/immutable. hence the precautionary const, not necessary. 
	"example" by default means a char pointer, not a string. 
	c++ has std::string that does a const char array. iostream has string already. 
	but we include string because overload of << to write to console is inside <string>.
	+ is overloaded too. But we need a string object before we can call + or append(). so 
	string demo = "see" + "this"; gives an error. 
	string demo = "see"; 
	demo += "this" doesn't. or 
	string demo = string("see") + "hello"; where we called the string constructor first. 
	passing to a function that doesn't need to work in isolation? pass it as 
	void printFxn(const std::string& demo) { 
	cout<<demo;
	} to not make a copy

>>  string literals: "like this". What it becomes, depends on the situation. By default, this is a const char*
	But it isn't always const char*. C++ doesn't define what happens here. It's undefined behavior, and can break
	in some compilers. Basically, treat it like const char* pls. It's because string literals are stored in the 
	read-only part of the memory. msvc throws no errors here, but clang will.
	char name[] = "This is okay.";
	char* name = "This means you are a bad person";
	const char* name = "This is how it should be";
	All of these are still in the read only part tho. We're overwriting if we're editing them.

>>  wchar_t, char_16t, std::string_literals, R"something" to ignore escape characters (multi line string)

>>  const int* a = new int; 
	*a = 2 gives an error. a = variable gives no error. Data AT that memory is constant. 
	int const* a does the same. 
	But int* const a will protect the pointer. (think yourself: int* a vs int *a)

>>  Inside a class, func() const {} means no editing of the class attributes. e.g. a getter fxn. 
	const int* const func() const {} means we'll return a pointer whose data can't be modified, the pointer
	can't be modified, and the function won't modify attributes. beware of passing const reference 
	(cuz reference is pointer). const classtype instanceName; can't call functions that are not const.

>>  mutable overrides the previous point. const function can modify mutable attributes. Other use with lambdas.

>>  volatile marks a variable as crazy. C++ won't try to do any optimizing regarding volatile variables and assume
	that they are being changed by some external factors, e.g. a system clock

>>  Lambdas are little throwaway functions inside your code. They run like real functions though. 
	If you pass a variable as reference, you can't touch it, unless you do 
	auto f = [=]() mutable {
	body
	}. The = means by value. The variable you took to modify? will get modified inside the function, but will
	return to its original glory once it's out. (This is a rare af case).

>>  Member initialiser list. Performance advantage for types that are not the primitive types.
	className(int ex, int wy, int ze) 
		: x(ex), y(wy), z(ze)
		{}	//list in order as the variables were declared in the class declaration
	In case of primitive types, it doesn't matter whether you're using initialiser list or assigning in the body.
	But otherwise, if x was an object and we didn't include it in the list, and define x(ex) inside the body, 
	it would call x() first as we enter the body, then call	the constructor we want - x(ex). 
	We created and threw away a class instance. This is a performance overhead. If using initialiser list, embrace it completely

>>  Ternary operator. 
	storage = condition ? value if true : value if false; 
	This too can improve performance, because of return value optimisation in the equivalent normal code.

>>  stack has limited memory, like 1-2 mb. then allocate in the heap: className* instance = new className(param);
	java and c#, memory managed languages, by default construct in heap. We shouldn't do that in c++, cuz
	we'll have to use: delete instance;. But wait, how to work with pointer shit? use -> operator. 
	new returns a pointer to the allocated memory. only difference between 
	Entity* e = new Entity(); and 
	Entity* e = (Entity*)malloc(sizeof(Entity)); is that new also calls the constructor. 
	new int[], then use delete[] instead of delete. 
	new(b) int initialises an int at the address b.

>>  implicit conversion (somewhere where C++ didn't, but should have, thrown an error).
	C++ is only allowed to do one conversion. But this happens only in bad code. Write explicit in front of 
	constructor names to make sure implicit conversion doesn't happen.
	if the class has a constructor that takes one int, we can write shit like
	className instanceName = 22; which is equivalent to 
	className instanceName = className(22);
	but if the class has constructor using a string and we try
	className instanceName = "I love you"; it fails. Because char* has to be converted to string, and then string
	to className, which are 2 conversions, and C++ doesn't do 2 implicit conversions.

>>  operator overloading. java doesn't support operator overloading. C# does a little bit. 
	Override ostream to cout << object:
	std::ostream& operator<<(std::string& stream, const className instance)
	{
		stream << instance.x << ", " << instance.y;		//bacuse we've already overridden  << y 
	}

>>  (*thing).x is thing->x. this keyword is a const className*. The pointer is const. Data can be edited. 
	delete this; : use to make an explosion in runtime.

>>  smart pointer is a raw pointer wrapped in protective blanket of new and delete. 
	#include <memory> 
	std::unique_ptr <className> instanceName(new className()); 
	instanceName = new className(); doesn't work because smart pointers don't support it. otherwise write 
	std::unique_ptr<className> instance = std::make_unique<className>(); unique pointer cannot be copied. 
	as the pointer expires, it kills the data it points to as well. sharing that pointer is not possible. 
	so shared_ptr. it keeps a reference count. make a copy, reference++. when reference is 1, means the last 
	pointer here, it will kill the data and free the memory. 
	weak_ptr doesn't keep the counter and allows copying. no safety mechanism.

>>  By default when you copy a class instance, the values are the same. That means the pointers as well. 
	Try to delete the memory at that address twice and you'll have an error. 
	This is Shallow copy. We need a copy constructor to perform a deep copy.  The default copy constructor 
	provided by C++ is: 
	className (const className& other) : member(other.member) {} or 
	className (const className& other) { 
		memcpy(this, &other, sizeof(className));
	} 
	Check copy constructor demo for a demo.

>>	Copy constructor is called when
	className instance = previousInstance;
	function(classInstanceByValue)
	className instance = function()
	the function returns a temporary copy of the object you created inside the function.
	After assignment, that temporary object will get destroyed as well. Returning objects
	created inside a function is a risky affair and we should be careful of all memory access'.
	
	instace_1 = instance_2; has similar concerns of illegal memory access, but is not handled by
	copy constructor. To fix this one, we'll have to overload the '=' operator.

>>  Always pass your objects by const reference. You shouldn't be passing around copies all the time. You can
	make your own copy if you need to, so there is literally no drawbacks. See Last example.

>>  className* ptr = &instance; 
	className& stuff = *ptr;

>>  Dynamic array. standard template library. Vectors etc. 
	vector<int> stuff; 
	stuff.push_back(34).
	stuff.reserve(3). //doesn't construct 3 ints, it just reserves the memory so  we don't have to move
	stuff.emplace_back(parameter list) instead of push_back to not to a lot of copying.

>>  Library in C++: grab binaries (maybe compile yourself to get them). Static library means its included In 
	your exe. Dynamic will be linked in runtime (dll). In project properties you'll have to set locations of 
	header and lib. Just the header will lead to a successful compile. But linker will fail then.

>>  returning two values from a function: 
	return a struct, return a tuple (std template from <utility> and <functional>, which is an automatic struct),
	return a pointer from where we calculate stuff (make sure it's heap allocated and undeleted), or 
	make the parent provide with where to write stuff. Struct is nice, a shared program resource. 

>>  2D arrays are not guaranteed to be a contiguous array. Better to get a 1D array and manage it properly. 
	Don't do pointer arithmetic, especially in the heap!!

>>  int main(int argc, char* argv[]) to pass values to main 
	argv[0] is just the name of the program. argv[1] is the first parameter.
	use atoi(), atof(), atol() from <cstdlib> to convert from string to int, double, long

>>  Thinking int* a vs int *a; int* a is how you should usually think, except:
	int* a, b; creates int* a; int b;